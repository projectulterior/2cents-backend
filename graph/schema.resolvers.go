package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"net/http"

	"github.com/projectulterior/2cents-backend/graph/model"
	"github.com/projectulterior/2cents-backend/graph/resolver"
	"github.com/projectulterior/2cents-backend/pkg/format"
	"github.com/projectulterior/2cents-backend/pkg/likes"
	"github.com/projectulterior/2cents-backend/pkg/posts"
	"github.com/projectulterior/2cents-backend/pkg/users"
)

// UserUpdate is the resolver for the userUpdate field.
func (r *mutationResolver) UserUpdate(ctx context.Context, input model.UserUpdateInput) (*resolver.User, error) {
	userID, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	user, err := r.Users.UpdateUser(ctx, users.UpdateUserRequest{
		UserID:   userID,
		Name:     input.Name,
		Email:    input.Email,
		Bio:      input.Bio,
		Birthday: input.Birthday,
	})
	if err != nil {
		return nil, err
	}

	return resolver.NewUserWithData(r.Services, user), nil
}

// UserDelete is the resolver for the userDelete field.
func (r *mutationResolver) UserDelete(ctx context.Context) (*resolver.User, error) {
	userID, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	_, err = r.Users.DeleteUser(ctx, users.DeleteUserRequest{
		UserID: userID,
	})
	if err != nil {
		return nil, err
	}

	return resolver.NewUserByID(r.Services, userID), nil
}

// PostCreate is the resolver for the postCreate field.
func (r *mutationResolver) PostCreate(ctx context.Context, input model.PostCreateInput) (*resolver.Post, error) {
	authID, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	reply, err := r.Posts.CreatePost(ctx, posts.CreatePostRequest{
		AuthorID:    authID,
		Visibility:  *input.Visibility,
		Content:     *input.Content,
		ContentType: *input.ContentType,
	})
	if err != nil {
		return nil, err
	}

	return resolver.NewPostWithData(r.Services, reply), nil
}

// PostUpdate is the resolver for the postUpdate field.
func (r *mutationResolver) PostUpdate(ctx context.Context, id string, input model.PostUpdateInput) (*resolver.Post, error) {
	authID, err := authUserID(ctx)
	if err != nil {
		return nil, err
	}

	postID, err := format.ParsePostID(id)
	if err != nil {
		return nil, err
	}

	post, err := r.Posts.UpdatePost(ctx, posts.UpdatePostRequest{
		PostID:      postID,
		AuthorID:    authID,
		Visibility:  input.Visibility,
		Content:     input.Content,
		ContentType: input.ContentType,
	})
	if err != nil {
		return nil, err
	}

	return resolver.NewPostWithData(r.Services, post), nil
}

// PostDelete is the resolver for the postDelete field.
func (r *mutationResolver) PostDelete(ctx context.Context, id string) (*resolver.Post, error) {
	postID, err := format.ParsePostID(id)
	if err != nil {
		return nil, err
	}

	_, err = r.Posts.DeletePost(ctx, posts.DeletePostRequest{
		PostID: postID,
	})
	if err != nil {
		return nil, err
	}
	return resolver.NewPostByID(r.Services, postID), nil
}

// CommentCreate is the resolver for the commentCreate field.
func (r *mutationResolver) CommentCreate(ctx context.Context, input model.CommentCreateInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentCreate - commentCreate"))
}

// CommentUpdate is the resolver for the commentUpdate field.
func (r *mutationResolver) CommentUpdate(ctx context.Context, id string, input model.CommentUpdateInput) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentUpdate - commentUpdate"))
}

// CommentDelete is the resolver for the commentDelete field.
func (r *mutationResolver) CommentDelete(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentDelete - commentDelete"))
}

// LikeCreate is the resolver for the likeCreate field.
func (r *mutationResolver) LikeCreate(ctx context.Context, id string) (*resolver.Like, error) {
	authID, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	postID, err := format.ParsePostID(id)
	if err != nil {
		return nil, err
	}

	reply, err := r.Likes.CreateLike(ctx, likes.CreateLikeRequest{
		PostID:  postID,
		LikerID: authID,
	})
	if err != nil {
		return nil, err
	}

	return resolver.NewLikeWithData(r.Services, reply), nil
}

// LikeDelete is the resolver for the likeDelete field.
func (r *mutationResolver) LikeDelete(ctx context.Context, id string) (*resolver.Like, error) {
	panic(fmt.Errorf("not implemented: LikeDelete - likeDelete"))
}

// UserFollow is the resolver for the userFollow field.
func (r *mutationResolver) UserFollow(ctx context.Context, id string) (*resolver.User, error) {
	panic(fmt.Errorf("not implemented: UserFollow - userFollow"))
}

// Likes is the resolver for the likes field.
func (r *postResolver) Likes(ctx context.Context, obj *resolver.Post, page model.Pagination) (*model.Likes, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *resolver.Post, page model.Pagination) (*model.Comments, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *string) (*resolver.User, error) {
	authID, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	if id != nil {
		// not their own user, but someone else
		userID, err := format.ParseUserID(*id)
		if err != nil {
			return nil, e(ctx, http.StatusBadRequest, err.Error())
		}

		return resolver.NewUserByID(r.Services, userID), nil
	}

	// their own user
	return resolver.NewMyUser(r.Services, authID), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, page model.Pagination) (*model.Users, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*resolver.Post, error) {
	_, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	postID, err := format.ParsePostID(id)
	if err != nil {
		return nil, e(ctx, http.StatusBadRequest, err.Error())
	}

	return resolver.NewPostByID(r.Services, postID), nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, page model.Pagination) (*model.Posts, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, page model.Pagination) (*model.Comments, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Like is the resolver for the like field.
func (r *queryResolver) Like(ctx context.Context, id string) (*resolver.Like, error) {
	_, err := authUserID(ctx)
	if err != nil {
		return nil, e(ctx, http.StatusForbidden, err.Error())
	}

	likeID, err := format.ParseLikeID(id)
	if err != nil {
		return nil, e(ctx, http.StatusBadRequest, err.Error())
	}

	return resolver.NewLikeByID(r.Services, likeID), nil
}

// Likes is the resolver for the likes field.
func (r *queryResolver) Likes(ctx context.Context, page model.Pagination) (*model.Likes, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}

// Channel is the resolver for the channel field.
func (r *queryResolver) Channel(ctx context.Context, id string) (*model.Channel, error) {
	panic(fmt.Errorf("not implemented: Channel - channel"))
}

// ChannelByMembers is the resolver for the channelByMembers field.
func (r *queryResolver) ChannelByMembers(ctx context.Context, members []string) (*model.Channel, error) {
	panic(fmt.Errorf("not implemented: ChannelByMembers - channelByMembers"))
}

// OnUserUpdated is the resolver for the onUserUpdated field.
func (r *subscriptionResolver) OnUserUpdated(ctx context.Context, id *string) (<-chan *resolver.User, error) {
	panic(fmt.Errorf("not implemented: OnUserUpdated - onUserUpdated"))
}

// Username is the resolver for the username field.
func (r *userResolver) Username(ctx context.Context, obj *resolver.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Username - username"))
}

// Birthday is the resolver for the birthday field.
func (r *userResolver) Birthday(ctx context.Context, obj *resolver.User) (*format.Birthday, error) {
	panic(fmt.Errorf("not implemented: Birthday - birthday"))
}

// Cents is the resolver for the cents field.
func (r *userResolver) Cents(ctx context.Context, obj *resolver.User) (*model.Cents, error) {
	panic(fmt.Errorf("not implemented: Cents - cents"))
}

// Email is the resolver for the email field.
func (r *userResolver) Email(ctx context.Context, obj *resolver.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Follows is the resolver for the follows field.
func (r *userResolver) Follows(ctx context.Context, obj *resolver.User, page *model.Pagination) (*model.Follows, error) {
	panic(fmt.Errorf("not implemented: Follows - follows"))
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *resolver.User, page *model.Pagination) (*model.Posts, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// TotalLikes is the resolver for the totalLikes field.
func (r *userResolver) TotalLikes(ctx context.Context, obj *resolver.User) (int, error) {
	panic(fmt.Errorf("not implemented: TotalLikes - totalLikes"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
