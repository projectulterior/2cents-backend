schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar Time

type Query {
  user(id: ID): User!
  users(page: Pagination!): Users!

  post(id: ID!): Post!
  posts(page: Pagination!): Posts!

  comment(id: ID!): Comment!
  comments(page: Pagination!): Comments!

  like(id: ID!): Like!
  likes(page: Pagination!): Likes!

  commentLike(id: ID!): CommentLike!
  commentLikes(page: Pagination!): CommentLikes!

  follow(id: ID!): Follow!
  follows(page: Pagination!): Follows!

  channel(id: ID!): Channel!
  channelByMembers(members: [ID!]!): Channel!

  message(id:ID!): Message!
  messages(page: Pagination!): Messages!
}

type Mutation {
  userUpdate(input: UserUpdateInput!): User!
  userDelete: User!
  userFollow(id: ID!, isFollow: Boolean!): Follow!

  postCreate(input: PostCreateInput!): Post! 
  postUpdate(id: ID!, input: PostUpdateInput!): Post!
  postDelete(id: ID!): Post!

  commentCreate(input: CommentCreateInput!): Comment!
  commentUpdate(id: ID!, input: CommentUpdateInput!): Comment!
  commentDelete(id: ID!): Comment!

  likeCreate(id: ID!): Like!
  likeDelete(id: ID!): Like!

  commentLikeCreate(id: ID!): CommentLike!
  commentLikeDelete(id: ID!): CommentLike!

  followCreate(id: ID!): Follow!
  followDelete(id: ID!): Follow!

  channelCreate(input: ChannelCreateInput!): Channel!
  addMembers(id: ID!, input: AddMembersInput!): Channel!
  channelDelete(id: ID!): Channel!

  messageCreate(input: MessageCreateInput!): Message!
  messageUpdate(id: ID!, input: MessageUpdateInput!): Message!
  messageDelete(id: ID!): Message!
}

type Subscription {
  onUserUpdated(id: ID): User!
}

type User {
  id: ID!

  username: String
  name: String
  email: String
  birthday: Birthday
  bio: String

  profile: String
  cover: String

  cents: Cents

  follows(page: Pagination): Follows
  posts(page: Pagination): Posts
  likes(page: Pagination): Likes
}

type Cents {
  total: Int!
  deposited: Int!
  earned: Int!
  given: Int!
}

type Users {
  users: [User!]!
  next: String!
}

type Birthday {
  month: Int!
  day: Int!
  year: Int!
}

type Posts {
  posts: [Post!]!
  next: String!
}

type Post {
  id: ID!
  visibility: Visibility
  content: String
  contentType: ContentType
  createdAt: Time
  updatedAt: Time
  author: User
  likes(page: Pagination!): Likes
  comments(page: Pagination!): Comments
}

type Follow {
  id: ID!
  follower: User
  followee: User
  createdAt: Time
}

type Follows {
  follows: [Follow!]!
  next: String
}

type Like {
  id: ID!
  post: Post
  liker: User
  createdAt: Time

}

type Likes {
  likes: [Like!]!
  next: String!
}

type Comment {
  id: ID!
  post: Post
  content: String
  author: User
  commentLikes(page: Pagination!): CommentLikes
  createdAt: Time
}

type Comments {
  comments: [Comment!]!
  next: String!
}

type CommentLike {
  id: ID!
  comment: Comment
  liker: User
  createdAt: Time
}

type CommentLikes {
  commentLikes: [CommentLike!]!
  next: String
}


type Channel {
  id: ID!
  members: [User!]
  messages(page: Pagination!): Messages
  createdAt: Time
  updatedAt: Time
}

type Message {
  id: ID!
  channel: Channel!
  content: String
  contentType: ContentType
  createdAt: Time
  sender: User
}

type Messages {
  messages: [Message!]
  next: String
}

enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}

### Inputs

input Pagination {
  cursor: String!
  limit: Int!
}

input BirthdayInput {
  day: Int
  month: Int
  year: Int
}

input UserUpdateInput {
  name: String
  email: String
  bio: String
  birthday: BirthdayInput
  
  profile: String
  cover: String
}

input PostCreateInput {
  visibility: Visibility!
  content: String!
  contentType: ContentType!
}

input PostUpdateInput {
  visibility: Visibility
  content: String
  contentType: ContentType
}

input CommentCreateInput {
  postID: ID!
  content: String!
  contentType: ContentType!
}

input CommentUpdateInput {
  content: String
  contentType: ContentType
}

input MessageCreateInput {
  channelID: ID!
  senderID: ID!
  content: String
  contentType: ContentType
}

input ChannelCreateInput {
  memberIDs: [ID!]!
}

input AddMembersInput {
  channelID: ID!
  memberID: ID!
  memberIDs: [ID!]!
}

input MessageUpdateInput {
  messageID: ID!
  senderID: ID!
  content: String
  contentType: ContentType
}